---
description: 
globs: 
alwaysApply: false
---
# Next.js Frontend Development Patterns

## TypeScript Type Definitions

### Core Types for Agent Management
```typescript
// Agent configuration types
export interface AgentConfig {
  name: string;
  description: string;
  model: string;
  systemPrompt: string;
  tools: string[];
  guardrails: string[];
  handoffs: string[];
  isActive: boolean;
  metadata: Record<string, any>;
  createdAt?: string;
  updatedAt?: string;
}

export interface AgentConfigUpdate {
  description?: string;
  systemPrompt?: string;
  tools?: string[];
  guardrails?: string[];
  handoffs?: string[];
  isActive?: boolean;
  metadata?: Record<string, any>;
}

// API response types
export interface ApiResponse<T = any> {
  success: boolean;
  message: string;
  data?: T;
}

export interface AgentListResponse {
  agents: Array<{
    name: string;
    config: AgentConfig;
    isActive: boolean;
    toolsCount: number;
    guardrailsCount: number;
  }>;
}

// Conversation types
export interface Conversation {
  id: string;
  currentAgent: string;
  messages: Message[];
  context: Record<string, any>;
  createdAt: string;
  updatedAt: string;
}

export interface Message {
  id: string;
  content: string;
  role: "user" | "assistant";
  agent?: string;
  timestamp: Date;
}

// Event types
export interface AgentEvent {
  id: string;
  type: "message" | "handoff" | "tool_call" | "tool_output" | "context_update";
  agent: string;
  content: string;
  timestamp: Date;
  metadata?: {
    sourceAgent?: string;
    targetAgent?: string;
    toolName?: string;
    toolArgs?: Record<string, any>;
    toolResult?: any;
    contextKey?: string;
    contextValue?: any;
    changes?: Record<string, any>;
  };
}

export interface GuardrailCheck {
  id: string;
  name: string;
  input: string;
  reasoning: string;
  passed: boolean;
  timestamp: Date;
}
```

## API Client Implementation

### Base API Client
```typescript
// lib/api-client.ts
const API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000';

class ApiClient {
  private baseUrl: string;

  constructor(baseUrl: string = API_BASE_URL) {
    this.baseUrl = baseUrl;
  }

  private async request<T>(
    endpoint: string,
    options: RequestInit = {}
  ): Promise<ApiResponse<T>> {
    const url = `${this.baseUrl}${endpoint}`;
    
    const config: RequestInit = {
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
      ...options,
    };

    try {
      const response = await fetch(url, config);
      const data = await response.json();
      
      if (!response.ok) {
        throw new Error(data.detail || `HTTP ${response.status}`);
      }
      
      return data;
    } catch (error) {
      console.error('API request failed:', error);
      throw error;
    }
  }

  // Agent Management Methods
  async getAgents(): Promise<ApiResponse<AgentListResponse>> {
    return this.request<AgentListResponse>('/api/v1/agents');
  }

  async getAgent(name: string): Promise<ApiResponse<{ agent: AgentConfig }>> {
    return this.request<{ agent: AgentConfig }>(`/api/v1/agents/${name}`);
  }

  async createAgent(config: AgentConfig): Promise<ApiResponse<{ agentName: string }>> {
    return this.request<{ agentName: string }>('/api/v1/agents', {
      method: 'POST',
      body: JSON.stringify(config),
    });
  }

  async updateAgent(name: string, updates: AgentConfigUpdate): Promise<ApiResponse<{ agent: AgentConfig }>> {
    return this.request<{ agent: AgentConfig }>(`/api/v1/agents/${name}`, {
      method: 'PUT',
      body: JSON.stringify(updates),
    });
  }

  async deleteAgent(name: string): Promise<ApiResponse<void>> {
    return this.request<void>(`/api/v1/agents/${name}`, {
      method: 'DELETE',
    });
  }

  // Chat Methods
  async sendMessage(message: string, conversationId?: string): Promise<ApiResponse<{
    conversationId: string;
    currentAgent: string;
    messages: Message[];
    events: AgentEvent[];
    context: Record<string, any>;
    agents: AgentConfig[];
    guardrails: GuardrailCheck[];
  }>> {
    return this.request('/api/v1/chat', {
      method: 'POST',
      body: JSON.stringify({
        message,
        conversation_id: conversationId,
      }),
    });
  }

  // System Methods
  async getHealth(): Promise<ApiResponse<{
    status: string;
    agentsCount: number;
    conversationsCount: number;
    timestamp: number;
  }>> {
    return this.request('/api/v1/health');
  }

  async getMetrics(): Promise<ApiResponse<{
    totalAgents: number;
    activeAgents: number;
    totalConversations: number;
    activeConversations: number;
    systemUptime: number;
  }>> {
    return this.request('/api/v1/metrics');
  }
}

export const apiClient = new ApiClient();
```

## React Hooks for State Management

### Agent Management Hook
```typescript
// hooks/useAgentManager.ts
import { useState, useEffect, useCallback } from 'react';
import { apiClient } from '@/lib/api-client';
import type { AgentConfig, AgentConfigUpdate } from '@/lib/types';

export function useAgentManager() {
  const [agents, setAgents] = useState<AgentConfig[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  const fetchAgents = useCallback(async () => {
    try {
      setLoading(true);
      setError(null);
      const response = await apiClient.getAgents();
      if (response.success && response.data) {
        setAgents(response.data.agents.map(a => a.config));
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to fetch agents');
    } finally {
      setLoading(false);
    }
  }, []);

  const createAgent = useCallback(async (config: AgentConfig) => {
    try {
      setError(null);
      const response = await apiClient.createAgent(config);
      if (response.success) {
        await fetchAgents(); // Refresh the list
        return response.data?.agentName;
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to create agent');
      throw err;
    }
  }, [fetchAgents]);

  const updateAgent = useCallback(async (name: string, updates: AgentConfigUpdate) => {
    try {
      setError(null);
      const response = await apiClient.updateAgent(name, updates);
      if (response.success) {
        await fetchAgents(); // Refresh the list
        return response.data?.agent;
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to update agent');
      throw err;
    }
  }, [fetchAgents]);

  const deleteAgent = useCallback(async (name: string) => {
    try {
      setError(null);
      const response = await apiClient.deleteAgent(name);
      if (response.success) {
        await fetchAgents(); // Refresh the list
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to delete agent');
      throw err;
    }
  }, [fetchAgents]);

  useEffect(() => {
    fetchAgents();
  }, [fetchAgents]);

  return {
    agents,
    loading,
    error,
    createAgent,
    updateAgent,
    deleteAgent,
    refreshAgents: fetchAgents,
  };
}
```

### Chat Management Hook
```typescript
// hooks/useChatManager.ts
import { useState, useCallback } from 'react';
import { apiClient } from '@/lib/api-client';
import type { Message, AgentEvent, GuardrailCheck } from '@/lib/types';

export function useChatManager() {
  const [messages, setMessages] = useState<Message[]>([]);
  const [events, setEvents] = useState<AgentEvent[]>([]);
  const [guardrails, setGuardrails] = useState<GuardrailCheck[]>([]);
  const [currentAgent, setCurrentAgent] = useState<string>('');
  const [conversationId, setConversationId] = useState<string | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const sendMessage = useCallback(async (content: string) => {
    const userMessage: Message = {
      id: Date.now().toString(),
      content,
      role: 'user',
      timestamp: new Date(),
    };

    setMessages(prev => [...prev, userMessage]);
    setLoading(true);
    setError(null);

    try {
      const response = await apiClient.sendMessage(content, conversationId || undefined);
      
      if (response.success && response.data) {
        const { conversationId: newConversationId, currentAgent: newAgent, messages: newMessages, events: newEvents, guardrails: newGuardrails } = response.data;
        
        if (!conversationId) {
          setConversationId(newConversationId);
        }
        
        setCurrentAgent(newAgent);
        setGuardrails(newGuardrails || []);
        
        if (newEvents) {
          const stampedEvents = newEvents.map(e => ({
            ...e,
            timestamp: new Date(e.timestamp),
          }));
          setEvents(prev => [...prev, ...stampedEvents]);
        }
        
        if (newMessages) {
          const stampedMessages = newMessages.map(m => ({
            ...m,
            timestamp: new Date(),
          }));
          setMessages(prev => [...prev, ...stampedMessages]);
        }
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to send message');
    } finally {
      setLoading(false);
    }
  }, [conversationId]);

  const clearConversation = useCallback(() => {
    setMessages([]);
    setEvents([]);
    setGuardrails([]);
    setConversationId(null);
    setCurrentAgent('');
  }, []);

  return {
    messages,
    events,
    guardrails,
    currentAgent,
    conversationId,
    loading,
    error,
    sendMessage,
    clearConversation,
  };
}
```

## Component Patterns

### Agent Configuration Form
```typescript
// components/AgentConfigForm.tsx
import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Switch } from '@/components/ui/switch';
import { MultiSelect } from '@/components/ui/multi-select';
import type { AgentConfig, AgentConfigUpdate } from '@/lib/types';

interface AgentConfigFormProps {
  agent?: AgentConfig;
  onSave: (config: AgentConfig | AgentConfigUpdate) => Promise<void>;
  onCancel: () => void;
  availableTools: string[];
  availableGuardrails: string[];
  availableAgents: string[];
}

export function AgentConfigForm({
  agent,
  onSave,
  onCancel,
  availableTools,
  availableGuardrails,
  availableAgents,
}: AgentConfigFormProps) {
  const [config, setConfig] = useState<Partial<AgentConfig>>(
    agent || {
      name: '',
      description: '',
      model: 'gpt-4o-mini',
      systemPrompt: '',
      tools: [],
      guardrails: [],
      handoffs: [],
      isActive: true,
      metadata: {},
    }
  );
  const [loading, setLoading] = useState(false);
  const [errors, setErrors] = useState<Record<string, string>>({});

  const validateConfig = (): boolean => {
    const newErrors: Record<string, string> = {};

    if (!config.name?.trim()) {
      newErrors.name = 'Agent name is required';
    }

    if (!config.systemPrompt?.trim()) {
      newErrors.systemPrompt = 'System prompt is required';
    }

    if (config.name && !/^[a-zA-Z0-9_-]+$/.test(config.name)) {
      newErrors.name = 'Agent name can only contain letters, numbers, hyphens, and underscores';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!validateConfig()) {
      return;
    }

    setLoading(true);
    try {
      await onSave(config as AgentConfig);
    } catch (error) {
      console.error('Failed to save agent:', error);
    } finally {
      setLoading(false);
    }
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Agent Name
          </label>
          <Input
            value={config.name || ''}
            onChange={(e) => setConfig({ ...config, name: e.target.value })}
            placeholder="Enter agent name"
            disabled={!!agent} // Can't change name after creation
            className={errors.name ? 'border-red-500' : ''}
          />
          {errors.name && (
            <p className="text-red-500 text-sm mt-1">{errors.name}</p>
          )}
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Model
          </label>
          <select
            value={config.model || 'gpt-4o-mini'}
            onChange={(e) => setConfig({ ...config, model: e.target.value })}
            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
          >
            <option value="gpt-4o-mini">GPT-4o Mini</option>
            <option value="gpt-4o">GPT-4o</option>
            <option value="gpt-3.5-turbo">GPT-3.5 Turbo</option>
          </select>
        </div>
      </div>

      <div>
        <label className="block text-sm font-medium text-gray-700 mb-2">
          Description
        </label>
        <Input
          value={config.description || ''}
          onChange={(e) => setConfig({ ...config, description: e.target.value })}
          placeholder="Describe what this agent does"
        />
      </div>

      <div>
        <label className="block text-sm font-medium text-gray-700 mb-2">
          System Prompt
        </label>
        <Textarea
          value={config.systemPrompt || ''}
          onChange={(e) => setConfig({ ...config, systemPrompt: e.target.value })}
          placeholder="Enter the system prompt for this agent"
          rows={6}
          className={errors.systemPrompt ? 'border-red-500' : ''}
        />
        {errors.systemPrompt && (
          <p className="text-red-500 text-sm mt-1">{errors.systemPrompt}</p>
        )}
      </div>

      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Available Tools
          </label>
          <MultiSelect
            options={availableTools.map(tool => ({ value: tool, label: tool }))}
            value={config.tools || []}
            onChange={(tools) => setConfig({ ...config, tools })}
            placeholder="Select tools"
          />
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Guardrails
          </label>
          <MultiSelect
            options={availableGuardrails.map(guardrail => ({ value: guardrail, label: guardrail }))}
            value={config.guardrails || []}
            onChange={(guardrails) => setConfig({ ...config, guardrails })}
            placeholder="Select guardrails"
          />
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Handoff Targets
          </label>
          <MultiSelect
            options={availableAgents.map(agent => ({ value: agent, label: agent }))}
            value={config.handoffs || []}
            onChange={(handoffs) => setConfig({ ...config, handoffs })}
            placeholder="Select handoff targets"
          />
        </div>
      </div>

      <div className="flex items-center space-x-2">
        <Switch
          checked={config.isActive ?? true}
          onCheckedChange={(isActive) => setConfig({ ...config, isActive })}
        />
        <label className="text-sm font-medium text-gray-700">
          Active
        </label>
      </div>

      <div className="flex justify-end space-x-3">
        <Button type="button" variant="outline" onClick={onCancel}>
          Cancel
        </Button>
        <Button type="submit" disabled={loading}>
          {loading ? 'Saving...' : (agent ? 'Update Agent' : 'Create Agent')}
        </Button>
      </div>
    </form>
  );
}
```

### Agent Management Dashboard
```typescript
// components/AgentManagementDashboard.tsx
import { useState } from 'react';
import { Plus, Edit, Trash2, Play, Pause } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { AgentConfigForm } from './AgentConfigForm';
import { useAgentManager } from '@/hooks/useAgentManager';
import type { AgentConfig } from '@/lib/types';

export function AgentManagementDashboard() {
  const { agents, loading, error, createAgent, updateAgent, deleteAgent } = useAgentManager();
  const [showCreateForm, setShowCreateForm] = useState(false);
  const [editingAgent, setEditingAgent] = useState<AgentConfig | null>(null);

  const handleCreateAgent = async (config: AgentConfig) => {
    await createAgent(config);
    setShowCreateForm(false);
  };

  const handleUpdateAgent = async (updates: Partial<AgentConfig>) => {
    if (editingAgent) {
      await updateAgent(editingAgent.name, updates);
      setEditingAgent(null);
    }
  };

  const handleDeleteAgent = async (name: string) => {
    if (confirm(`Are you sure you want to delete agent "${name}"?`)) {
      await deleteAgent(name);
    }
  };

  const toggleAgentStatus = async (agent: AgentConfig) => {
    await updateAgent(agent.name, { isActive: !agent.isActive });
  };

  if (loading) {
    return <div className="flex justify-center p-8">Loading agents...</div>;
  }

  if (error) {
    return <div className="text-red-500 p-4">Error: {error}</div>;
  }

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h2 className="text-2xl font-bold">Agent Management</h2>
        <Button onClick={() => setShowCreateForm(true)}>
          <Plus className="w-4 h-4 mr-2" />
          Create Agent
        </Button>
      </div>

      {showCreateForm && (
        <Card className="p-6">
          <h3 className="text-lg font-semibold mb-4">Create New Agent</h3>
          <AgentConfigForm
            onSave={handleCreateAgent}
            onCancel={() => setShowCreateForm(false)}
            availableTools={['faq_lookup', 'flight_status', 'baggage_info', 'seat_update']}
            availableGuardrails={['relevance', 'jailbreak']}
            availableAgents={agents.map(a => a.name)}
          />
        </Card>
      )}

      {editingAgent && (
        <Card className="p-6">
          <h3 className="text-lg font-semibold mb-4">Edit Agent: {editingAgent.name}</h3>
          <AgentConfigForm
            agent={editingAgent}
            onSave={handleUpdateAgent}
            onCancel={() => setEditingAgent(null)}
            availableTools={['faq_lookup', 'flight_status', 'baggage_info', 'seat_update']}
            availableGuardrails={['relevance', 'jailbreak']}
            availableAgents={agents.map(a => a.name)}
          />
        </Card>
      )}

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        {agents.map((agent) => (
          <Card key={agent.name} className="p-4">
            <div className="flex justify-between items-start mb-3">
              <div>
                <h3 className="font-semibold text-lg">{agent.name}</h3>
                <p className="text-gray-600 text-sm">{agent.description}</p>
              </div>
              <Badge variant={agent.isActive ? 'default' : 'secondary'}>
                {agent.isActive ? 'Active' : 'Inactive'}
              </Badge>
            </div>

            <div className="space-y-2 mb-4">
              <div className="flex justify-between text-sm">
                <span>Model:</span>
                <span className="font-mono">{agent.model}</span>
              </div>
              <div className="flex justify-between text-sm">
                <span>Tools:</span>
                <span>{agent.tools.length}</span>
              </div>
              <div className="flex justify-between text-sm">
                <span>Guardrails:</span>
                <span>{agent.guardrails.length}</span>
              </div>
              <div className="flex justify-between text-sm">
                <span>Handoffs:</span>
                <span>{agent.handoffs.length}</span>
              </div>
            </div>

            <div className="flex space-x-2">
              <Button
                size="sm"
                variant="outline"
                onClick={() => toggleAgentStatus(agent)}
              >
                {agent.isActive ? <Pause className="w-4 h-4" /> : <Play className="w-4 h-4" />}
              </Button>
              <Button
                size="sm"
                variant="outline"
                onClick={() => setEditingAgent(agent)}
              >
                <Edit className="w-4 h-4" />
              </Button>
              <Button
                size="sm"
                variant="outline"
                onClick={() => handleDeleteAgent(agent.name)}
                className="text-red-600 hover:text-red-700"
              >
                <Trash2 className="w-4 h-4" />
              </Button>
            </div>
          </Card>
        ))}
      </div>
    </div>
  );
}
```

## Real-time Updates with WebSocket

### WebSocket Hook for Real-time Agent Status
```typescript
// hooks/useAgentWebSocket.ts
import { useEffect, useRef, useCallback } from 'react';

interface WebSocketMessage {
  type: 'agent_update' | 'conversation_update' | 'system_status';
  data: any;
}

export function useAgentWebSocket(onMessage: (message: WebSocketMessage) => void) {
  const wsRef = useRef<WebSocket | null>(null);

  const connect = useCallback(() => {
    const wsUrl = process.env.NEXT_PUBLIC_WS_URL || 'ws://localhost:8000/ws';
    const ws = new WebSocket(wsUrl);

    ws.onopen = () => {
      console.log('WebSocket connected');
    };

    ws.onmessage = (event) => {
      try {
        const message: WebSocketMessage = JSON.parse(event.data);
        onMessage(message);
      } catch (error) {
        console.error('Failed to parse WebSocket message:', error);
      }
    };

    ws.onclose = () => {
      console.log('WebSocket disconnected');
      // Reconnect after 5 seconds
      setTimeout(connect, 5000);
    };

    ws.onerror = (error) => {
      console.error('WebSocket error:', error);
    };

    wsRef.current = ws;
  }, [onMessage]);

  const disconnect = useCallback(() => {
    if (wsRef.current) {
      wsRef.current.close();
      wsRef.current = null;
    }
  }, []);

  useEffect(() => {
    connect();
    return () => disconnect();
  }, [connect, disconnect]);

  return { disconnect };
}
```

## Error Boundaries and Loading States

### Error Boundary Component
```typescript
// components/ErrorBoundary.tsx
import React from 'react';
import { AlertTriangle, RefreshCw } from 'lucide-react';
import { Button } from '@/components/ui/button';

interface ErrorBoundaryState {
  hasError: boolean;
  error?: Error;
}

export class ErrorBoundary extends React.Component<
  React.PropsWithChildren<{}>,
  ErrorBoundaryState
> {
  constructor(props: React.PropsWithChildren<{}>) {
    super(props);
    this.state = { hasError: false };
  }

  static getDerivedStateFromError(error: Error): ErrorBoundaryState {
    return { hasError: true, error };
  }

  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {
    console.error('Error caught by boundary:', error, errorInfo);
  }

  render() {
    if (this.state.hasError) {
      return (
        <div className="flex flex-col items-center justify-center min-h-[400px] p-8">
          <AlertTriangle className="w-16 h-16 text-red-500 mb-4" />
          <h2 className="text-xl font-semibold mb-2">Something went wrong</h2>
          <p className="text-gray-600 mb-4 text-center max-w-md">
            An unexpected error occurred. Please try refreshing the page.
          </p>
          <Button
            onClick={() => window.location.reload()}
            className="flex items-center space-x-2"
          >
            <RefreshCw className="w-4 h-4" />
            <span>Refresh Page</span>
          </Button>
        </div>
      );
    }

    return this.props.children;
  }
}
```

### Loading Spinner Component
```typescript
// components/LoadingSpinner.tsx
import { Loader2 } from 'lucide-react';

interface LoadingSpinnerProps {
  size?: 'sm' | 'md' | 'lg';
  text?: string;
}

export function LoadingSpinner({ size = 'md', text }: LoadingSpinnerProps) {
  const sizeClasses = {
    sm: 'w-4 h-4',
    md: 'w-6 h-6',
    lg: 'w-8 h-8',
  };

  return (
    <div className="flex flex-col items-center justify-center p-4">
      <Loader2 className={`${sizeClasses[size]} animate-spin text-blue-500`} />
      {text && <p className="mt-2 text-sm text-gray-600">{text}</p>}
    </div>
  );
}
```

